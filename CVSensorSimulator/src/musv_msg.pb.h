// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: musv_msg.proto

#ifndef PROTOBUF_INCLUDED_musv_5fmsg_2eproto
#define PROTOBUF_INCLUDED_musv_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_musv_5fmsg_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_musv_5fmsg_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_musv_5fmsg_2eproto();
namespace mUSV {
class RequestData;
class RequestDataDefaultTypeInternal;
extern RequestDataDefaultTypeInternal _RequestData_default_instance_;
class SensorData;
class SensorDataDefaultTypeInternal;
extern SensorDataDefaultTypeInternal _SensorData_default_instance_;
class SensorData_Pose2D;
class SensorData_Pose2DDefaultTypeInternal;
extern SensorData_Pose2DDefaultTypeInternal _SensorData_Pose2D_default_instance_;
class SensorData_Waypoint;
class SensorData_WaypointDefaultTypeInternal;
extern SensorData_WaypointDefaultTypeInternal _SensorData_Waypoint_default_instance_;
}  // namespace mUSV
namespace google {
namespace protobuf {
template<> ::mUSV::RequestData* Arena::CreateMaybeMessage<::mUSV::RequestData>(Arena*);
template<> ::mUSV::SensorData* Arena::CreateMaybeMessage<::mUSV::SensorData>(Arena*);
template<> ::mUSV::SensorData_Pose2D* Arena::CreateMaybeMessage<::mUSV::SensorData_Pose2D>(Arena*);
template<> ::mUSV::SensorData_Waypoint* Arena::CreateMaybeMessage<::mUSV::SensorData_Waypoint>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace mUSV {

// ===================================================================

class RequestData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mUSV.RequestData) */ {
 public:
  RequestData();
  virtual ~RequestData();

  RequestData(const RequestData& from);

  inline RequestData& operator=(const RequestData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestData(RequestData&& from) noexcept
    : RequestData() {
    *this = ::std::move(from);
  }

  inline RequestData& operator=(RequestData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RequestData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestData* internal_default_instance() {
    return reinterpret_cast<const RequestData*>(
               &_RequestData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RequestData* other);
  friend void swap(RequestData& a, RequestData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestData* New() const final {
    return CreateMaybeMessage<RequestData>(nullptr);
  }

  RequestData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestData& from);
  void MergeFrom(const RequestData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 tag_id = 1;
  void clear_tag_id();
  static const int kTagIdFieldNumber = 1;
  ::google::protobuf::int32 tag_id() const;
  void set_tag_id(::google::protobuf::int32 value);

  // bool request_waypoints = 2;
  void clear_request_waypoints();
  static const int kRequestWaypointsFieldNumber = 2;
  bool request_waypoints() const;
  void set_request_waypoints(bool value);

  // @@protoc_insertion_point(class_scope:mUSV.RequestData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 tag_id_;
  bool request_waypoints_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_musv_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class SensorData_Pose2D :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mUSV.SensorData.Pose2D) */ {
 public:
  SensorData_Pose2D();
  virtual ~SensorData_Pose2D();

  SensorData_Pose2D(const SensorData_Pose2D& from);

  inline SensorData_Pose2D& operator=(const SensorData_Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorData_Pose2D(SensorData_Pose2D&& from) noexcept
    : SensorData_Pose2D() {
    *this = ::std::move(from);
  }

  inline SensorData_Pose2D& operator=(SensorData_Pose2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorData_Pose2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData_Pose2D* internal_default_instance() {
    return reinterpret_cast<const SensorData_Pose2D*>(
               &_SensorData_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SensorData_Pose2D* other);
  friend void swap(SensorData_Pose2D& a, SensorData_Pose2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData_Pose2D* New() const final {
    return CreateMaybeMessage<SensorData_Pose2D>(nullptr);
  }

  SensorData_Pose2D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorData_Pose2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorData_Pose2D& from);
  void MergeFrom(const SensorData_Pose2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData_Pose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float yaw = 3;
  void clear_yaw();
  static const int kYawFieldNumber = 3;
  float yaw() const;
  void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:mUSV.SensorData.Pose2D)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float yaw_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_musv_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class SensorData_Waypoint :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mUSV.SensorData.Waypoint) */ {
 public:
  SensorData_Waypoint();
  virtual ~SensorData_Waypoint();

  SensorData_Waypoint(const SensorData_Waypoint& from);

  inline SensorData_Waypoint& operator=(const SensorData_Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorData_Waypoint(SensorData_Waypoint&& from) noexcept
    : SensorData_Waypoint() {
    *this = ::std::move(from);
  }

  inline SensorData_Waypoint& operator=(SensorData_Waypoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorData_Waypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData_Waypoint* internal_default_instance() {
    return reinterpret_cast<const SensorData_Waypoint*>(
               &_SensorData_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SensorData_Waypoint* other);
  friend void swap(SensorData_Waypoint& a, SensorData_Waypoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData_Waypoint* New() const final {
    return CreateMaybeMessage<SensorData_Waypoint>(nullptr);
  }

  SensorData_Waypoint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorData_Waypoint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorData_Waypoint& from);
  void MergeFrom(const SensorData_Waypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData_Waypoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:mUSV.SensorData.Waypoint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_musv_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class SensorData :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mUSV.SensorData) */ {
 public:
  SensorData();
  virtual ~SensorData();

  SensorData(const SensorData& from);

  inline SensorData& operator=(const SensorData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorData(SensorData&& from) noexcept
    : SensorData() {
    *this = ::std::move(from);
  }

  inline SensorData& operator=(SensorData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorData* internal_default_instance() {
    return reinterpret_cast<const SensorData*>(
               &_SensorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SensorData* other);
  friend void swap(SensorData& a, SensorData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorData* New() const final {
    return CreateMaybeMessage<SensorData>(nullptr);
  }

  SensorData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorData& from);
  void MergeFrom(const SensorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SensorData_Pose2D Pose2D;
  typedef SensorData_Waypoint Waypoint;

  // accessors -------------------------------------------------------

  // repeated int32 obstacle_sensors = 2 [packed = true];
  int obstacle_sensors_size() const;
  void clear_obstacle_sensors();
  static const int kObstacleSensorsFieldNumber = 2;
  ::google::protobuf::int32 obstacle_sensors(int index) const;
  void set_obstacle_sensors(int index, ::google::protobuf::int32 value);
  void add_obstacle_sensors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      obstacle_sensors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_obstacle_sensors();

  // repeated int32 target_sensors = 3 [packed = true];
  int target_sensors_size() const;
  void clear_target_sensors();
  static const int kTargetSensorsFieldNumber = 3;
  ::google::protobuf::int32 target_sensors(int index) const;
  void set_target_sensors(int index, ::google::protobuf::int32 value);
  void add_target_sensors(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      target_sensors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_target_sensors();

  // repeated .mUSV.SensorData.Waypoint waypoints = 5;
  int waypoints_size() const;
  void clear_waypoints();
  static const int kWaypointsFieldNumber = 5;
  ::mUSV::SensorData_Waypoint* mutable_waypoints(int index);
  ::google::protobuf::RepeatedPtrField< ::mUSV::SensorData_Waypoint >*
      mutable_waypoints();
  const ::mUSV::SensorData_Waypoint& waypoints(int index) const;
  ::mUSV::SensorData_Waypoint* add_waypoints();
  const ::google::protobuf::RepeatedPtrField< ::mUSV::SensorData_Waypoint >&
      waypoints() const;

  // .mUSV.SensorData.Pose2D pose = 1;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 1;
  const ::mUSV::SensorData_Pose2D& pose() const;
  ::mUSV::SensorData_Pose2D* release_pose();
  ::mUSV::SensorData_Pose2D* mutable_pose();
  void set_allocated_pose(::mUSV::SensorData_Pose2D* pose);

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  const ::google::protobuf::Timestamp& timestamp() const;
  ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* timestamp);

  // bool loop_waypoints = 6;
  void clear_loop_waypoints();
  static const int kLoopWaypointsFieldNumber = 6;
  bool loop_waypoints() const;
  void set_loop_waypoints(bool value);

  // @@protoc_insertion_point(class_scope:mUSV.SensorData)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > obstacle_sensors_;
  mutable std::atomic<int> _obstacle_sensors_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > target_sensors_;
  mutable std::atomic<int> _target_sensors_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::mUSV::SensorData_Waypoint > waypoints_;
  ::mUSV::SensorData_Pose2D* pose_;
  ::google::protobuf::Timestamp* timestamp_;
  bool loop_waypoints_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_musv_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestData

// int32 tag_id = 1;
inline void RequestData::clear_tag_id() {
  tag_id_ = 0;
}
inline ::google::protobuf::int32 RequestData::tag_id() const {
  // @@protoc_insertion_point(field_get:mUSV.RequestData.tag_id)
  return tag_id_;
}
inline void RequestData::set_tag_id(::google::protobuf::int32 value) {
  
  tag_id_ = value;
  // @@protoc_insertion_point(field_set:mUSV.RequestData.tag_id)
}

// bool request_waypoints = 2;
inline void RequestData::clear_request_waypoints() {
  request_waypoints_ = false;
}
inline bool RequestData::request_waypoints() const {
  // @@protoc_insertion_point(field_get:mUSV.RequestData.request_waypoints)
  return request_waypoints_;
}
inline void RequestData::set_request_waypoints(bool value) {
  
  request_waypoints_ = value;
  // @@protoc_insertion_point(field_set:mUSV.RequestData.request_waypoints)
}

// -------------------------------------------------------------------

// SensorData_Pose2D

// float x = 1;
inline void SensorData_Pose2D::clear_x() {
  x_ = 0;
}
inline float SensorData_Pose2D::x() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.Pose2D.x)
  return x_;
}
inline void SensorData_Pose2D::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.Pose2D.x)
}

// float y = 2;
inline void SensorData_Pose2D::clear_y() {
  y_ = 0;
}
inline float SensorData_Pose2D::y() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.Pose2D.y)
  return y_;
}
inline void SensorData_Pose2D::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.Pose2D.y)
}

// float yaw = 3;
inline void SensorData_Pose2D::clear_yaw() {
  yaw_ = 0;
}
inline float SensorData_Pose2D::yaw() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.Pose2D.yaw)
  return yaw_;
}
inline void SensorData_Pose2D::set_yaw(float value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.Pose2D.yaw)
}

// -------------------------------------------------------------------

// SensorData_Waypoint

// float x = 1;
inline void SensorData_Waypoint::clear_x() {
  x_ = 0;
}
inline float SensorData_Waypoint::x() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.Waypoint.x)
  return x_;
}
inline void SensorData_Waypoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.Waypoint.x)
}

// float y = 2;
inline void SensorData_Waypoint::clear_y() {
  y_ = 0;
}
inline float SensorData_Waypoint::y() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.Waypoint.y)
  return y_;
}
inline void SensorData_Waypoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.Waypoint.y)
}

// -------------------------------------------------------------------

// SensorData

// .mUSV.SensorData.Pose2D pose = 1;
inline bool SensorData::has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline void SensorData::clear_pose() {
  if (GetArenaNoVirtual() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::mUSV::SensorData_Pose2D& SensorData::pose() const {
  const ::mUSV::SensorData_Pose2D* p = pose_;
  // @@protoc_insertion_point(field_get:mUSV.SensorData.pose)
  return p != nullptr ? *p : *reinterpret_cast<const ::mUSV::SensorData_Pose2D*>(
      &::mUSV::_SensorData_Pose2D_default_instance_);
}
inline ::mUSV::SensorData_Pose2D* SensorData::release_pose() {
  // @@protoc_insertion_point(field_release:mUSV.SensorData.pose)
  
  ::mUSV::SensorData_Pose2D* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::mUSV::SensorData_Pose2D* SensorData::mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::mUSV::SensorData_Pose2D>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mUSV.SensorData.pose)
  return pose_;
}
inline void SensorData::set_allocated_pose(::mUSV::SensorData_Pose2D* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:mUSV.SensorData.pose)
}

// repeated int32 obstacle_sensors = 2 [packed = true];
inline int SensorData::obstacle_sensors_size() const {
  return obstacle_sensors_.size();
}
inline void SensorData::clear_obstacle_sensors() {
  obstacle_sensors_.Clear();
}
inline ::google::protobuf::int32 SensorData::obstacle_sensors(int index) const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.obstacle_sensors)
  return obstacle_sensors_.Get(index);
}
inline void SensorData::set_obstacle_sensors(int index, ::google::protobuf::int32 value) {
  obstacle_sensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:mUSV.SensorData.obstacle_sensors)
}
inline void SensorData::add_obstacle_sensors(::google::protobuf::int32 value) {
  obstacle_sensors_.Add(value);
  // @@protoc_insertion_point(field_add:mUSV.SensorData.obstacle_sensors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SensorData::obstacle_sensors() const {
  // @@protoc_insertion_point(field_list:mUSV.SensorData.obstacle_sensors)
  return obstacle_sensors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SensorData::mutable_obstacle_sensors() {
  // @@protoc_insertion_point(field_mutable_list:mUSV.SensorData.obstacle_sensors)
  return &obstacle_sensors_;
}

// repeated int32 target_sensors = 3 [packed = true];
inline int SensorData::target_sensors_size() const {
  return target_sensors_.size();
}
inline void SensorData::clear_target_sensors() {
  target_sensors_.Clear();
}
inline ::google::protobuf::int32 SensorData::target_sensors(int index) const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.target_sensors)
  return target_sensors_.Get(index);
}
inline void SensorData::set_target_sensors(int index, ::google::protobuf::int32 value) {
  target_sensors_.Set(index, value);
  // @@protoc_insertion_point(field_set:mUSV.SensorData.target_sensors)
}
inline void SensorData::add_target_sensors(::google::protobuf::int32 value) {
  target_sensors_.Add(value);
  // @@protoc_insertion_point(field_add:mUSV.SensorData.target_sensors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SensorData::target_sensors() const {
  // @@protoc_insertion_point(field_list:mUSV.SensorData.target_sensors)
  return target_sensors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SensorData::mutable_target_sensors() {
  // @@protoc_insertion_point(field_mutable_list:mUSV.SensorData.target_sensors)
  return &target_sensors_;
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool SensorData::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline const ::google::protobuf::Timestamp& SensorData::timestamp() const {
  const ::google::protobuf::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:mUSV.SensorData.timestamp)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* SensorData::release_timestamp() {
  // @@protoc_insertion_point(field_release:mUSV.SensorData.timestamp)
  
  ::google::protobuf::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* SensorData::mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mUSV.SensorData.timestamp)
  return timestamp_;
}
inline void SensorData::set_allocated_timestamp(::google::protobuf::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:mUSV.SensorData.timestamp)
}

// repeated .mUSV.SensorData.Waypoint waypoints = 5;
inline int SensorData::waypoints_size() const {
  return waypoints_.size();
}
inline void SensorData::clear_waypoints() {
  waypoints_.Clear();
}
inline ::mUSV::SensorData_Waypoint* SensorData::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:mUSV.SensorData.waypoints)
  return waypoints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::mUSV::SensorData_Waypoint >*
SensorData::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:mUSV.SensorData.waypoints)
  return &waypoints_;
}
inline const ::mUSV::SensorData_Waypoint& SensorData::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.waypoints)
  return waypoints_.Get(index);
}
inline ::mUSV::SensorData_Waypoint* SensorData::add_waypoints() {
  // @@protoc_insertion_point(field_add:mUSV.SensorData.waypoints)
  return waypoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mUSV::SensorData_Waypoint >&
SensorData::waypoints() const {
  // @@protoc_insertion_point(field_list:mUSV.SensorData.waypoints)
  return waypoints_;
}

// bool loop_waypoints = 6;
inline void SensorData::clear_loop_waypoints() {
  loop_waypoints_ = false;
}
inline bool SensorData::loop_waypoints() const {
  // @@protoc_insertion_point(field_get:mUSV.SensorData.loop_waypoints)
  return loop_waypoints_;
}
inline void SensorData::set_loop_waypoints(bool value) {
  
  loop_waypoints_ = value;
  // @@protoc_insertion_point(field_set:mUSV.SensorData.loop_waypoints)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mUSV

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_musv_5fmsg_2eproto
